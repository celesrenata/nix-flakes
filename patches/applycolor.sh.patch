--- a/.config/ags/scripts/color_generation/applycolor.sh
+++ b/.config/ags/scripts/color_generation/applycolor.sh
@@ -1,5 +1,5 @@
 #!/usr/bin/env bash
-
+set -x
 XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
 XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
 XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
@@ -7,11 +7,16 @@ CONFIG_DIR="$XDG_CONFIG_HOME/ags"
 CACHE_DIR="$XDG_CACHE_HOME/ags"
 STATE_DIR="$XDG_STATE_HOME/ags"
 
-term_alpha=100 #Set this to < 100 make all your terminals transparent
 # sleep 0 # idk i wanted some delay or colors dont get applied properly
 if [ ! -d "$CACHE_DIR"/user/generated ]; then
     mkdir -p "$CACHE_DIR"/user/generated
 fi
+if [ ! -f "$HOME"/.cache/ags/user/generated/terminal/transparency ]; then
+    term_alpha=100 #Set this to < 100 make all your terminals transparent
+    echo "$term_alpha" > "$HOME"/.cache/ags/user/generated/terminal/transparency
+else
+    term_alpha=$(cat "$HOME"/.cache/ags/user/generated/terminal/transparency)
+fi
 cd "$CONFIG_DIR" || exit
 
 colornames=''
@@ -29,7 +34,7 @@ transparentize() {
   local hex="$1"
   local alpha="$2"
   local red green blue
-
+  
   red=$((16#${hex:1:2}))
   green=$((16#${hex:3:2}))
   blue=$((16#${hex:5:2}))
@@ -37,6 +42,16 @@ transparentize() {
   printf 'rgba(%d, %d, %d, %.2f)\n' "$red" "$green" "$blue" "$alpha"
 }
 
+dehex() {
+  local hex="$1"
+  local red green blue
+  red=$((16#${hex:1:2}))
+  green=$((16#${hex:3:2}))
+  blue=$((16#${hex:5:2}))
+
+  printf '%d, %d, %d' "$red" "$green" "$blue"
+}
+
 get_light_dark() {
     lightdark=""
     if [ ! -f "$STATE_DIR/user/colormode.txt" ]; then
@@ -47,6 +62,19 @@ get_light_dark() {
     echo "$lightdark"
 }
 
+get_transparency() {
+    transparency=""
+    if [ ! -f "$HOME"/.cache/ags/user/colormode.txt ]; then
+        echo "" > "$HOME"/.cache/ags/user/colormode.txt
+    else
+        transparency=$(sed -n '2p' "$HOME/.cache/ags/user/colormode.txt")
+    fi  
+    if [ "${transparency}" == "opaque" ]; then
+	term_alpha=100
+    fi
+    echo "$term_alpha"
+}
+
 apply_fuzzel() {
     # Check if scripts/templates/fuzzel/fuzzel.ini exists
     if [ ! -f "scripts/templates/fuzzel/fuzzel.ini" ]; then
@@ -62,9 +90,30 @@ apply_fuzzel() {
     done
 
     cp  "$CACHE_DIR"/user/generated/fuzzel/fuzzel.ini "$XDG_CONFIG_HOME"/fuzzel/fuzzel.ini
+    chmod +w "$XDG_CONFIG_HOME"/fuzzel/fuzzel.ini
+}
+
+apply_foot() {
+    if [ ! -f "scripts/templates/foot/foot.ini" ]; then
+        echo "Template file not found for Foot. Skipping that."
+        return
+    fi
+    # Copy template
+    mkdir -p "$HOME"/.cache/ags/user/generated/foot
+    cp "scripts/templates/foot/foot.ini" "$HOME"/.cache/ags/user/generated/foot/foot.ini
+    chmod +w "$HOME"/.cache/ags/user/generated/foot/foot.ini
+
+    # Apply colors
+    for i in "${!colorlist[@]}"; do
+        # sed -i "s/${colorlist[$i]} #/${colorvalues[$i]#\#}/g" "$HOME"/.cache/ags/user/generated/foot/foot.ini
+        sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]#\#}/g" "$HOME"/.cache/ags/user/generated/foot/foot.ini
+    done
+
+    cp "$HOME"/.cache/ags/user/generated/foot/foot.ini "$HOME/.config/foot/foot.ini"
 }
 
 apply_term() {
+    term_alpha=$(get_transparency)
     # Check if terminal escape sequence template exists
     if [ ! -f "scripts/templates/terminal/sequences.txt" ]; then
         echo "Template file not found for Terminal. Skipping that."
@@ -73,6 +122,8 @@ apply_term() {
     # Copy template
     mkdir -p "$CACHE_DIR"/user/generated/terminal
     cp "scripts/templates/terminal/sequences.txt" "$CACHE_DIR"/user/generated/terminal/sequences.txt
+    chmod +w "$HOME"/.cache/ags/user/generated/terminal/sequences.txt
+
     # Apply colors
     for i in "${!colorlist[@]}"; do
         sed -i "s/${colorlist[$i]} #/${colorvalues[$i]#\#}/g" "$CACHE_DIR"/user/generated/terminal/sequences.txt
@@ -96,12 +147,14 @@ apply_hyprland() {
     # Copy template
     mkdir -p "$CACHE_DIR"/user/generated/hypr/hyprland
     cp "scripts/templates/hypr/hyprland/colors.conf" "$CACHE_DIR"/user/generated/hypr/hyprland/colors.conf
+    chmod +w "$HOME"/.cache/ags/user/generated/hypr/hyprland/colors.conf
+
     # Apply colors
     for i in "${!colorlist[@]}"; do
         sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]#\#}/g" "$CACHE_DIR"/user/generated/hypr/hyprland/colors.conf
     done
-
     cp "$CACHE_DIR"/user/generated/hypr/hyprland/colors.conf "$XDG_CONFIG_HOME"/hypr/hyprland/colors.conf
+
 }
 
 apply_hyprlock() {
@@ -113,6 +166,8 @@ apply_hyprlock() {
     # Copy template
     mkdir -p "$CACHE_DIR"/user/generated/hypr/
     cp "scripts/templates/hypr/hyprlock.conf" "$CACHE_DIR"/user/generated/hypr/hyprlock.conf
+    chmod +w  "$HOME"/.cache/ags/user/generated/hypr/hyprlock.conf
+
     # Apply colors
     # sed -i "s/{{ SWWW_WALL }}/${wallpath_png}/g" "$CACHE_DIR"/user/generated/hypr/hyprlock.conf
     for i in "${!colorlist[@]}"; do
@@ -128,6 +183,7 @@ apply_gtk() { # Using gradience-cli
     # Copy template
     mkdir -p "$CACHE_DIR"/user/generated/gradience
     cp "scripts/templates/gradience/preset.json" "$CACHE_DIR"/user/generated/gradience/preset.json
+    chmod +w  "$HOME"/.cache/ags/user/generated/gradience/preset.json
 
     # Apply colors
     for i in "${!colorlist[@]}"; do
@@ -154,6 +210,37 @@ apply_ags() {
     ags run-js 'openColorScheme.value = true; Utils.timeout(2000, () => openColorScheme.value = false);'
 }
 
+apply_wofi() {
+    # Check if scripts/templates/wofi/style.css exists
+    if [ ! -f "scripts/templates/wofi/style.css" ]; then
+        echo "Template file not found for Wofi colors. Skipping that."
+        return
+    fi
+    # Copy template
+    cp "scripts/templates/wofi/style.css" "$HOME/.config/wofi/style_new.css"
+    chmod +w "$HOME/.config/wofi/style_new.css"
+    # Apply colors
+    for i in "${!colorlist[@]}"; do
+        sed -i "s/{{ ${colorlist[$i]} }}/${colorvalues[$i]#\#}/g" "$HOME/.config/wofi/style_new.css"
+    done
+
+    for i in "${!colorlist[@]}"; do
+        case ${colorvalues[$i]} in
+            True|False|true|false)
+                dehexed=${colorvalues[$i]}
+		#TODO: Do I need these?
+		continue
+	        ;;
+            *)
+                dehexed=$(dehex ${colorvalues[$i]})
+		;;
+        esac
+        sed -i "s/{{ ${colorlist[$i]}-rgb }}/${dehexed}/g" "$HOME/.config/wofi/style_new.css"
+    done
+
+    mv "$HOME/.config/wofi/style_new.css" "$HOME/.config/wofi/style.css"
+}
+
 if [[ "$1" = "--bad-apple" ]]; then
     lightdark=$(get_light_dark)
     cp scripts/color_generation/specials/_material_badapple"${lightdark}".scss $STATE_DIR/scss/_material.scss
@@ -170,9 +257,15 @@ else
     colorvalues=( $colorstrings ) # Array of color values
 fi
 
+if [ "$1" = "term" ]; then
+    apply_term &
+    exit 0
+fi
 apply_ags &
 apply_hyprland &
 apply_hyprlock &
 apply_gtk &
 apply_fuzzel &
 apply_term &
+apply_wofi &
+apply_foot &
